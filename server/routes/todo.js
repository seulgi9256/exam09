const express = require('express')
const Sequelize = require('sequelize')     
const Todo = require('../models/todo')          
const router = express.Router()

// Ìï† Ïùº Î™©Î°ù
router.get('/', async (req, res) => {
    console.log('Ìï† Ïùº Î™©Î°ù...');
    let todoList = [];
    try {
        todoList = await Todo.findAll();
    } catch (error) {
        console.log(error);
        return res.status(500).json({ error: 'Internal Server Error' });
    }

    res.json({ todoList });
});



// Ìï† Ïùº Îì±Î°ù
router.get('/insert', (req, res) => {
    console.log('Ìï† Ïùº Îì±Î°ù ÌôîÎ©¥...');
    res.json({ message: 'Ìï† Ïùº Îì±Î°ù ÌôîÎ©¥' });
});



// üë©‚Äçüíª Ìï† Ïùº Îì±Î°ù
router.post('/insert', async (req, res) => {
    console.log('Ìï† Ïùº Îì±Î°ù...');
    const { content, status } = req.body;
  
    let result = 0;
    try {
      const newTodo = await Todo.create({
        content,
        status,
      });
      no = newTodo.no;
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  
    console.log(`Îì±Î°ù result : ${result}`);
    res.json({ result, no });
  });


// üë©‚Äçüíª Ìï† Ïùº ÏàòÏ†ï ÌéòÏù¥ÏßÄ
router.get('/update/:no', async (req, res) => {
    console.log('Ìï† Ïùº ÏàòÏ†ï ÌôîÎ©¥...');
    console.log(`no : ${req.params.no}`);
    let no = req.params.no
    let todo = await Todo.findByPk(no)
    // res.render('todos/update', { todo, no });
    res.json({ todo, no })
});




// ÏÑ†ÌÉù ÏôÑÎ£å
router.put('/update/:no', async (req, res) => {
  console.log('Ìï† Ïùº ÏÑ†ÌÉù ÏôÑÎ£å...');
  const { no, content, status } = req.body;

  let result = 0;
  try {
    result = await Todo.update({
      content: content,
      status: status,
      upd_date: Sequelize.literal('now()')
    }, {
      where: { no: no }
    });
  } catch (error) {
    console.log(error);
  }
  console.log(`ÏàòÏ†ï result : ${result}`);
  res.json({ no, result });
});

// Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÏôÑÎ£å
router.put('/updateAll', async (req, res) => {
  console.log('Î™®Îì† Ìï† Ïùº ÏôÑÎ£å...');

  try {
    // Ï†ÑÏ≤¥ Ìï† ÏùºÏùÑ Ï∞æÏïÑ ÏùºÍ¥ÑÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
    const result = await Todo.update(
      { status: 1, upd_date: Sequelize.literal('now()') },
      { where: { status: 0 } }
    );

    console.log(`ÏàòÏ†ï result : ${result}`);
    
    // ÏôÑÎ£å ÌõÑÏóê Î™©Î°ùÏùÑ Îã§Ïãú Î∂àÎü¨Ïò¥
    // const updatedListResponse = await fetch('http://localhost:9090/todos');
    // const updatedListData = await updatedListResponse.json();
    // setTodoList(Array.isArray(updatedListData.todoList) ? updatedListData.todoList : []);

    res.status(200).send();
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


// üë©‚Äçüíª Ìï† Ïùº ÏÇ≠Ï†ú
router.delete('/:no', async (req, res) => {
    console.log('Ìï† Ïùº ÏÇ≠Ï†ú...');
    const no = req.params.no;
  
    let result = 0;
    try {
      result = await Todo.destroy({
        where: { no: no },
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
    console.log(`ÏÇ≠Ï†ú result : ${result}`);
  
    res.json({ result, no });
  });
  
// üë©‚Äçüíª Ìï† Ïùº Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
router.delete('/delete/all', async (req, res) => {
    console.log('Î™®Îì† Ìï† Ïùº ÏÇ≠Ï†ú...');
  
    try {
      // Ï†ÑÏ≤¥ Ìï† Ïùº ÏÇ≠Ï†ú Î°úÏßÅ Íµ¨ÌòÑ
      await Todo.destroy({ where: {} });
  
      res.status(204).send(); // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏùåÏùÑ ÎÇòÌÉÄÎÇ¥Îäî ÏÉÅÌÉú ÏΩîÎìú 204 Ï†ÑÏÜ°
    } catch (error) {
      console.log(error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });

// üë©‚Äçüíª Ìï† Ïùº ÏùΩÍ∏∞
// ÏöîÏ≤≠ Í≤ΩÎ°úÏóê ÌååÎùºÎØ∏ÌÑ∞ Îß§Ìïë Î∞©Î≤ï ‚û° '/:ÌååÎùºÎØ∏ÌÑ∞Î™Ö'
router.get('/read/:no', async (req, res) => {
    console.log('Ìï† Ïùº ÏùΩÍ∏∞ ÌôîÎ©¥...');
    console.log(`no : ${req.params.no}`);
    let no = req.params.no
    let todo = await Todo.findByPk(no)
    console.log(todo);
    // res.render('todos/read', {todo, no})
    res.json({ todo, no })
})


module.exports = router;